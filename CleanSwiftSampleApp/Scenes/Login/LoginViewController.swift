//
//  LoginViewController.swift
//  CleanSwiftSampleApp
//
//  Created by cloudZon Infosoft on 31/05/18.
//  Copyright (c) 2018 MB. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func loginSuccess(viewModel: Login.Success.ViewModel)
    func loginFail(viewModel: Login.Fail.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
  
  // MARK: Do something
  
    @IBOutlet weak var txtMobile:UITextField!
  
    func loginSuccess(viewModel: Login.Success.ViewModel) {
        router?.routeToVerify(segue: nil)
    }

    func loginFail(viewModel: Login.Fail.ViewModel) {
        let alert = UIAlertController.init(title: "Fail", message: viewModel.message, preferredStyle: .alert)
        self.present(alert, animated: true, completion: nil)
        let when = DispatchTime.now() + 2
        DispatchQueue.main.asyncAfter(deadline: when) {
            alert.dismiss(animated: true, completion: {
                
            })
        }
    }
}

extension LoginViewController {
    @IBAction func sendSMSAction() {
        let request = Login.Success.Request(mobileNumber: txtMobile.text!)
        interactor?.createLogin(request: request)
    }
}
